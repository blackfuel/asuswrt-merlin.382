--- a/src/cryptsetup.c
+++ b/src/cryptsetup.c
@@ -23,6 +23,9 @@
 
 #include "cryptsetup.h"
 #include <uuid/uuid.h>
+#ifndef HND_ROUTER
+#include "posix_fallocate.h"
+#endif
 
 static const char *opt_cipher = NULL;
 static const char *opt_hash = NULL;
--- a/src/cryptsetup_reencrypt.c
+++ b/src/cryptsetup_reencrypt.c
@@ -24,6 +24,9 @@
 #include <linux/fs.h>
 #include <arpa/inet.h>
 #include <uuid/uuid.h>
+#ifndef HND_ROUTER
+#include "posix_fallocate.h"
+#endif
 
 #define PACKAGE_REENC "crypt_reencrypt"
 
--- a/lib/utils_device.c
+++ b/lib/utils_device.c
@@ -39,6 +39,9 @@
 #endif
 #include "internal.h"
 #include "utils_device_locking.h"
+#ifndef HND_ROUTER
+#include "posix_fallocate.h"
+#endif
 
 struct device {
 	char *path;
--- a/lib/luks2/luks2_luks1_convert.c
+++ b/lib/luks2/luks2_luks1_convert.c
@@ -23,6 +23,9 @@
 #include "luks2_internal.h"
 #include "../luks1/luks.h"
 #include "../luks1/af.h"
+#ifndef HND_ROUTER
+#include "../posix_fallocate.h"
+#endif
 
 static int json_luks1_keyslot(const struct luks_phdr *hdr_v1, int keyslot, struct json_object **keyslot_object)
 {
--- a/lib/posix_fallocate.h
+++ b/lib/posix_fallocate.h
@@ -0,0 +1,27 @@
+#ifndef	_POSIX_FALLOCATE_H
+#define	_POSIX_FALLOCATE_H	1
+
+#include <stdint.h>
+#include <sys/syscall.h>
+
+/********************************************************************************/
+/* stole from uClibc-33a12b5540b8abbc4ee0ecb3a51912b3c7868517: include/endian.h */
+#define OFF_HI(offset) (offset >> 31)
+#define OFF_LO(offset) (offset)
+#define OFF64_HI(offset) (uint32_t)(offset >> 32)
+#define OFF64_LO(offset) (uint32_t)(offset & 0xffffffff)
+#define OFF_HI_LO(offset) __LONG_LONG_PAIR(OFF_HI(offset), OFF_LO(offset))
+#define OFF64_HI_LO(offset) __LONG_LONG_PAIR(OFF64_HI(offset), OFF64_LO(offset))
+/********************************************************************************/
+
+inline int posix_fallocate64(int __fd, __off64_t __offset, __off64_t __len)
+{
+  return syscall(SYS_fallocate, __fd, 0, OFF64_HI_LO (__offset), OFF64_HI_LO (__len));
+}
+
+inline int posix_fallocate(int __fd, __off64_t __offset, __off64_t __len)
+{
+  return syscall(SYS_fallocate, __fd, 0, OFF64_HI_LO (__offset), OFF64_HI_LO (__len));
+}
+
+#endif /* posix_fallocate.h  */
